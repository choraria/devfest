name: Process URL Update Requests

on:
  issues:
    types: [opened, labeled]

# Add permissions block to grant access to issues
permissions:
  issues: write
  contents: read

jobs:
  process-url-request:
    if: |
      contains(github.event.issue.labels.*.name, 'update-url') && 
      !contains(github.event.issue.labels.*.name, 'processed') && 
      github.event.action != 'edited'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Extract issue body
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;
            const issueTitle = context.payload.issue.title;
            
            // Extract slug from title
            const slugMatch = issueTitle.match(/\(slug:\s*([^)]+)\)/);
            const slug = slugMatch ? slugMatch[1].trim() : '';
            
            // Extract city from title for default DevFest name
            const cityMatch = issueTitle.match(/Update DevFest details:\s*([^(]+)/);
            const city = cityMatch ? cityMatch[1].trim() : slug;
            
            const extractField = (id) => {
              const regex = new RegExp(`### ${id}[^#]*\\n\\n([^#]+)(?=###|$)`, 'ms');
              const match = issueBody.match(regex);
              return match ? match[1].trim() : '';
            };
            
            const destinationUrl = extractField('Destination URL');
            let devfestName = extractField('DevFest Name');
            const devfestDate = extractField('DevFest Date');
            
            // If DevFest name is empty, generate default format
            if (!devfestName) {
              const year = devfestDate ? new Date(devfestDate).getFullYear() : new Date().getFullYear();
              devfestName = `DevFest ${city} ${year}`;
            }
            
            const data = {
              slug,
              destinationUrl,
              devfestDate,
              devfestName,
              updatedBy: context.payload.issue.user.login,
              updatedAt: new Date().toISOString()
            };
            
            core.setOutput('data', JSON.stringify(data));
      
      - name: Update Redis
        uses: actions/github-script@v7
        env:
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          URL_DATA: ${{ steps.extract.outputs.data }}
        with:
          script: |
            const { Redis } = require('@upstash/redis');
            
            const redis = new Redis({
              url: process.env.UPSTASH_REDIS_REST_URL,
              token: process.env.UPSTASH_REDIS_REST_TOKEN,
            });
            
            const data = JSON.parse(process.env.URL_DATA);
            
            // Validate required fields and formats
            const errors = [];
            
            if (!data.destinationUrl) {
              errors.push("Missing required field: destinationUrl");
            } else if (!data.destinationUrl.startsWith('https://')) {
              errors.push("destinationUrl must be a valid HTTPS URL");
            }
            
            if (!data.devfestDate) {
              errors.push("Missing required field: devfestDate");
            } else {
              const dateRegex = /^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$/;
              if (!dateRegex.test(data.devfestDate)) {
                errors.push("devfestDate must be in YYYY-MM-DD format");
              }
            }
            
            if (!data.slug) {
              errors.push("Could not generate a valid URL slug from the provided information");
            }
            
            if (errors.length > 0) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ Error: Invalid or missing fields:\n\n${errors.map(e => `- ${e}`).join('\n')}\n\nPlease update the issue with the correct information.`
              });
              return;
            }
            
            try {
              // Check if slug already exists
              const existing = await redis.get(data.slug);
              if (existing) {
                // If updating existing entry, merge with existing data to preserve metadata
                data = { ...JSON.parse(existing), ...data };
              }
              
              // Update Redis with the data
              const key = data.slug;
              await redis.set(key, data);
              
              // Add processed label
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['processed']
              });
              
              // Format the success message with more details
              const successMessage = [
                `✅ URL update processed successfully!`,
                ``,
                `**URL Details:**`,
                `- Short URL: \`devfe.st/${data.slug}\``,
                `- Destination: ${data.destinationUrl}`,
                `- Event Date: ${data.devfestDate}`,
                data.devfestName ? `- Event Name: ${data.devfestName}` : null,
                `- Updated by: @${data.updatedBy}`,
                `- Last Updated: ${new Date(data.updatedAt).toLocaleString()}`,
                ``,
                `The URL is now live and ready to use.`,
                ``,
                `Note: If you need to make any changes in the future, feel free to create a new update request.`
              ].filter(Boolean).join('\n');
              
              // Comment on the issue
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: successMessage
              });
              
              // Close the issue
              await github.rest.issues.update({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed'
              });
            } catch (error) {
              console.error('Error updating Redis:', error);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ Error processing URL update: ${error.message}`
              });
            } 